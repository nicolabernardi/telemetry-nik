from enum import IntEnum, IntFlag
from struct import pack, unpack
from collections import namedtuple

{%- for bitset in bitsets %}

class {{ bitset.name }}(IntFlag):
    {%- for item_name, item_value in bitset.items %}
    {{ item_name }} = {{ 2**item_value }}
    {%- endfor %}

{%- endfor %}

{%- for enum in enums %}
    
class {{ enum.name }}(IntEnum):
    {%- for item_name, item_value in enum.items %}
    {{ item_name }} = {{ item_value }}
    {%- endfor %}
    
{%- endfor %}

{% for struct in structs -%}
{%- set class_name = struct.name %}
# {{ class_name }}
class {{ class_name }}:
    {% set parameters = ", ".join(fill_padding(struct.fields.keys())).replace("0x00, ", "") -%}
    struct = namedtuple("{{ class_name }}_struct", "{{ " ".join(struct.fields.keys()) }}", rename=True)
    schema = "{{ endianness_tag }}{{ format_string(struct.fields) }}"
    
    @staticmethod
    def serialize({{ parameters }}) -> bytes:
        return pack({{ class_name }}.schema, {{ parameters }})
    
    @staticmethod
    def deserialize(buffer: bytes) -> "{{ class_name }}.struct":
        return {{ class_name }}.struct._make(unpack({{ class_name }}.schema, buffer))
{% endfor -%}